// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String?
  email     String?  @unique
  image     String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  Reply    Reply[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  updatedAt DateTime @updatedAt
  likedIds  String[] @db.ObjectId

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  updatedAt DateTime @updatedAt

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  Reply Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  commentId String   @db.ObjectId
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
